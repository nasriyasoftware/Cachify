export type TaskPriorityLevel = 0 | 1 | 2 | 3; // 0 = highest, 3 = lowest
export interface BaseCacheTask<T = any> {
    /**
     * The unique identifier for the task.
     * The `id` can be generated from the queue manager's `generateTaskId` method.
     * or imittted by the user and autogenerated by the queue manager.
     */
    id: string;

    /**
     * The type of the task.
     * TODO: Specific task types should be defined, each has its extended
     * interface and implementation.
     */
    type: string;

    /**
     * The priority of the task from `0` (highest) to `3` (lowest).
     * @default 3
     */
    priority?: TaskPriorityLevel;

    /**
     * The task action to be performed by the queue.
     * If the `action` promise resolves, the resolved value will be passed
     * to the `onResolve` callback.
     */
    action: (...args: any) => Promise<T>;

    /** Callback to be executed when the task is resolved. */
    onResolve?: (result: T) => any | Promise<any>;

    /** Callback to be executed when the task is rejected. */
    onReject?: (error: Error, ...args: any) => any | Promise<any>;

    /** Callback to be executed when the task is done. */
    onDone?: () => any | Promise<any>;
}